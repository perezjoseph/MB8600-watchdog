name: Build and Publish Docker Images

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  # Use the repository name directly - we'll convert to lowercase in the steps
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        variant:
          - name: "standard"
            dockerfile: "Dockerfile"
            suffix: ""
            description: "Standard MB8600-watchdog with basic monitoring"
            platforms: "linux/amd64,linux/arm64"
          - name: "enhanced"
            dockerfile: "Dockerfile-improved"
            suffix: "-enhanced"
            description: "Enhanced MB8600-watchdog with TCP/IP diagnostics, outage tracking, and advanced logging"
            platforms: "linux/amd64,linux/arm64"
          - name: "slim"
            dockerfile: "Dockerfile-slim"
            suffix: "-slim"
            description: "Slim MB8600-watchdog with enhanced features in minimal Alpine-based image"
            platforms: "linux/amd64,linux/arm64"
          - name: "ultra-slim"
            dockerfile: "Dockerfile-ultra-slim"
            suffix: "-ultra-slim"
            description: "Ultra-slim MB8600-watchdog with core features only in minimal image"
            platforms: "linux/amd64"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lowercase image name
        run: echo "LOWERCASE_IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}
          tags: |
            type=schedule,suffix=${{ matrix.variant.suffix }}
            type=ref,event=branch,suffix=${{ matrix.variant.suffix }}
            type=ref,event=tag,suffix=${{ matrix.variant.suffix }}
            type=semver,pattern={{version}},suffix=${{ matrix.variant.suffix }}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ matrix.variant.suffix }}
            type=semver,pattern={{major}},suffix=${{ matrix.variant.suffix }}
            type=sha,format=long,suffix=${{ matrix.variant.suffix }}
            type=sha,format=short,suffix=${{ matrix.variant.suffix }}
            type=raw,value=latest${{ matrix.variant.suffix }},enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker image (${{ matrix.variant.name }})
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.variant.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.variant.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.title=MB8600-watchdog (${{ matrix.variant.name }})
            org.opencontainers.image.description=${{ matrix.variant.description }}
            org.opencontainers.image.variant=${{ matrix.variant.name }}
          cache-from: type=gha,scope=${{ matrix.variant.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant.name }}

  # Test job to validate all images work
  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        variant: ["standard", "enhanced", "slim", "ultra-slim"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set lowercase image name
        run: echo "LOWERCASE_IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        
      - name: Test ${{ matrix.variant }} image
        run: |
          SUFFIX=""
          case "${{ matrix.variant }}" in
            "enhanced") SUFFIX="-enhanced" ;;
            "slim") SUFFIX="-slim" ;;
            "ultra-slim") SUFFIX="-ultra-slim" ;;
          esac
          
          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}:${{ github.sha }}${SUFFIX}
          
          # Test basic functionality (dry run)
          docker run --rm \
            -e MODEM_HOST=192.168.100.1 \
            -e CHECK_INTERVAL=5 \
            -e FAILURE_THRESHOLD=1 \
            ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}:${{ github.sha }}${SUFFIX} \
            timeout 10s python3 -c "print('Image test successful')" || true

  # Size comparison job
  size-comparison:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Set lowercase image name
        run: echo "LOWERCASE_IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        
      - name: Pull all images and compare sizes
        run: |
          echo "## Image Size Comparison" >> $GITHUB_STEP_SUMMARY
          echo "| Variant | Size | Compressed | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|------------|-------------|" >> $GITHUB_STEP_SUMMARY
          
          # Pull and inspect each variant
          for variant in "" "-enhanced" "-slim" "-ultra-slim"; do
            IMAGE="${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}:latest${variant}"
            docker pull $IMAGE
            SIZE=$(docker images $IMAGE --format "{{.Size}}")
            
            case "$variant" in
              "") DESC="Standard - Basic monitoring" ;;
              "-enhanced") DESC="Enhanced - Full features" ;;
              "-slim") DESC="Slim - Alpine-based enhanced" ;;
              "-ultra-slim") DESC="Ultra-slim - Minimal features" ;;
            esac
            
            VARIANT_NAME=${variant:-"standard"}
            echo "| ${VARIANT_NAME} | ${SIZE} | - | ${DESC} |" >> $GITHUB_STEP_SUMMARY
          done
